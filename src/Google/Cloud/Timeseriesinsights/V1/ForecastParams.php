<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/timeseriesinsights/v1/timeseries_insights.proto

namespace Google\Cloud\Timeseriesinsights\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Parameters that control the sensitivity and other options for the time series
 * forecast.
 *
 * Generated from protobuf message <code>google.cloud.timeseriesinsights.v1.ForecastParams</code>
 */
class ForecastParams extends \Google\Protobuf\Internal\Message
{
    /**
     * Optional. Penalize variations between the actual and forecasted values smaller than
     * this. For more information about how this parameter affects the score, see
     * the [anomalyScore](EvaluatedSlice.anomaly_score) formula.
     * Intuitively, anomaly scores summarize how statistically significant the
     * change between the actual and forecasted value is compared with what we
     * expect the change to be (see
     * [expectedDeviation](EvaluatedSlice.expected_deviation)). However, in
     * practice, depending on the application, changes smaller than certain
     * absolute values, while statistically significant, may not be important.
     * This parameter allows us to penalize such low absolute value changes.
     * Must be in the (0.0, inf) range.
     * If unspecified, it defaults to 0.000001.
     *
     * Generated from protobuf field <code>optional double noise_threshold = 12 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    protected $noise_threshold = null;
    /**
     * Optional. Specifying any known seasonality/periodicity in the time series
     * for the slices we will analyze can improve the quality of the results.
     * If unsure, simply leave it unspecified by not setting a value for this
     * field.
     * If your time series has multiple seasonal patterns, then set it to the most
     * granular one (e.g. if it has daily and weekly patterns, set this to DAILY).
     *
     * Generated from protobuf field <code>.google.cloud.timeseriesinsights.v1.ForecastParams.Period seasonality_hint = 10 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    protected $seasonality_hint = 0;
    /**
     * Optional. The length of the returned [forecasted
     * timeseries][EvaluatedSlice.forecast].
     * This duration is currently capped at 100 x
     * [granularity][google.cloud.timeseriesinsights.v1.TimeseriesParams.granularity].
     * Example: If the detection point is set to "2020-12-27T00:00:00Z", the
     * [granularity][google.cloud.timeseriesinsights.v1.TimeseriesParams.granularity] to "3600s" and the
     * horizon_duration to "10800s", then we will generate 3 time
     * series points (from "2020-12-27T01:00:00Z" to "2020-12-27T04:00:00Z"), for
     * which we will return their forecasted values.
     * Note: The horizon time is only used for forecasting not for anormaly
     * detection. To detect anomalies for multiple points of time,
     * simply send multiple queries with those as
     * [detectionTime][google.cloud.timeseriesinsights.v1.QueryDataSetRequest.detection_time].
     *
     * Generated from protobuf field <code>.google.protobuf.Duration horizon_duration = 13 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    protected $horizon_duration = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type float $noise_threshold
     *           Optional. Penalize variations between the actual and forecasted values smaller than
     *           this. For more information about how this parameter affects the score, see
     *           the [anomalyScore](EvaluatedSlice.anomaly_score) formula.
     *           Intuitively, anomaly scores summarize how statistically significant the
     *           change between the actual and forecasted value is compared with what we
     *           expect the change to be (see
     *           [expectedDeviation](EvaluatedSlice.expected_deviation)). However, in
     *           practice, depending on the application, changes smaller than certain
     *           absolute values, while statistically significant, may not be important.
     *           This parameter allows us to penalize such low absolute value changes.
     *           Must be in the (0.0, inf) range.
     *           If unspecified, it defaults to 0.000001.
     *     @type int $seasonality_hint
     *           Optional. Specifying any known seasonality/periodicity in the time series
     *           for the slices we will analyze can improve the quality of the results.
     *           If unsure, simply leave it unspecified by not setting a value for this
     *           field.
     *           If your time series has multiple seasonal patterns, then set it to the most
     *           granular one (e.g. if it has daily and weekly patterns, set this to DAILY).
     *     @type \Google\Protobuf\Duration $horizon_duration
     *           Optional. The length of the returned [forecasted
     *           timeseries][EvaluatedSlice.forecast].
     *           This duration is currently capped at 100 x
     *           [granularity][google.cloud.timeseriesinsights.v1.TimeseriesParams.granularity].
     *           Example: If the detection point is set to "2020-12-27T00:00:00Z", the
     *           [granularity][google.cloud.timeseriesinsights.v1.TimeseriesParams.granularity] to "3600s" and the
     *           horizon_duration to "10800s", then we will generate 3 time
     *           series points (from "2020-12-27T01:00:00Z" to "2020-12-27T04:00:00Z"), for
     *           which we will return their forecasted values.
     *           Note: The horizon time is only used for forecasting not for anormaly
     *           detection. To detect anomalies for multiple points of time,
     *           simply send multiple queries with those as
     *           [detectionTime][google.cloud.timeseriesinsights.v1.QueryDataSetRequest.detection_time].
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Timeseriesinsights\V1\TimeseriesInsights::initOnce();
        parent::__construct($data);
    }

    /**
     * Optional. Penalize variations between the actual and forecasted values smaller than
     * this. For more information about how this parameter affects the score, see
     * the [anomalyScore](EvaluatedSlice.anomaly_score) formula.
     * Intuitively, anomaly scores summarize how statistically significant the
     * change between the actual and forecasted value is compared with what we
     * expect the change to be (see
     * [expectedDeviation](EvaluatedSlice.expected_deviation)). However, in
     * practice, depending on the application, changes smaller than certain
     * absolute values, while statistically significant, may not be important.
     * This parameter allows us to penalize such low absolute value changes.
     * Must be in the (0.0, inf) range.
     * If unspecified, it defaults to 0.000001.
     *
     * Generated from protobuf field <code>optional double noise_threshold = 12 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return float
     */
    public function getNoiseThreshold()
    {
        return isset($this->noise_threshold) ? $this->noise_threshold : 0.0;
    }

    public function hasNoiseThreshold()
    {
        return isset($this->noise_threshold);
    }

    public function clearNoiseThreshold()
    {
        unset($this->noise_threshold);
    }

    /**
     * Optional. Penalize variations between the actual and forecasted values smaller than
     * this. For more information about how this parameter affects the score, see
     * the [anomalyScore](EvaluatedSlice.anomaly_score) formula.
     * Intuitively, anomaly scores summarize how statistically significant the
     * change between the actual and forecasted value is compared with what we
     * expect the change to be (see
     * [expectedDeviation](EvaluatedSlice.expected_deviation)). However, in
     * practice, depending on the application, changes smaller than certain
     * absolute values, while statistically significant, may not be important.
     * This parameter allows us to penalize such low absolute value changes.
     * Must be in the (0.0, inf) range.
     * If unspecified, it defaults to 0.000001.
     *
     * Generated from protobuf field <code>optional double noise_threshold = 12 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param float $var
     * @return $this
     */
    public function setNoiseThreshold($var)
    {
        GPBUtil::checkDouble($var);
        $this->noise_threshold = $var;

        return $this;
    }

    /**
     * Optional. Specifying any known seasonality/periodicity in the time series
     * for the slices we will analyze can improve the quality of the results.
     * If unsure, simply leave it unspecified by not setting a value for this
     * field.
     * If your time series has multiple seasonal patterns, then set it to the most
     * granular one (e.g. if it has daily and weekly patterns, set this to DAILY).
     *
     * Generated from protobuf field <code>.google.cloud.timeseriesinsights.v1.ForecastParams.Period seasonality_hint = 10 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return int
     */
    public function getSeasonalityHint()
    {
        return $this->seasonality_hint;
    }

    /**
     * Optional. Specifying any known seasonality/periodicity in the time series
     * for the slices we will analyze can improve the quality of the results.
     * If unsure, simply leave it unspecified by not setting a value for this
     * field.
     * If your time series has multiple seasonal patterns, then set it to the most
     * granular one (e.g. if it has daily and weekly patterns, set this to DAILY).
     *
     * Generated from protobuf field <code>.google.cloud.timeseriesinsights.v1.ForecastParams.Period seasonality_hint = 10 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param int $var
     * @return $this
     */
    public function setSeasonalityHint($var)
    {
        GPBUtil::checkEnum($var, \Google\Cloud\Timeseriesinsights\V1\ForecastParams\Period::class);
        $this->seasonality_hint = $var;

        return $this;
    }

    /**
     * Optional. The length of the returned [forecasted
     * timeseries][EvaluatedSlice.forecast].
     * This duration is currently capped at 100 x
     * [granularity][google.cloud.timeseriesinsights.v1.TimeseriesParams.granularity].
     * Example: If the detection point is set to "2020-12-27T00:00:00Z", the
     * [granularity][google.cloud.timeseriesinsights.v1.TimeseriesParams.granularity] to "3600s" and the
     * horizon_duration to "10800s", then we will generate 3 time
     * series points (from "2020-12-27T01:00:00Z" to "2020-12-27T04:00:00Z"), for
     * which we will return their forecasted values.
     * Note: The horizon time is only used for forecasting not for anormaly
     * detection. To detect anomalies for multiple points of time,
     * simply send multiple queries with those as
     * [detectionTime][google.cloud.timeseriesinsights.v1.QueryDataSetRequest.detection_time].
     *
     * Generated from protobuf field <code>.google.protobuf.Duration horizon_duration = 13 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return \Google\Protobuf\Duration|null
     */
    public function getHorizonDuration()
    {
        return $this->horizon_duration;
    }

    public function hasHorizonDuration()
    {
        return isset($this->horizon_duration);
    }

    public function clearHorizonDuration()
    {
        unset($this->horizon_duration);
    }

    /**
     * Optional. The length of the returned [forecasted
     * timeseries][EvaluatedSlice.forecast].
     * This duration is currently capped at 100 x
     * [granularity][google.cloud.timeseriesinsights.v1.TimeseriesParams.granularity].
     * Example: If the detection point is set to "2020-12-27T00:00:00Z", the
     * [granularity][google.cloud.timeseriesinsights.v1.TimeseriesParams.granularity] to "3600s" and the
     * horizon_duration to "10800s", then we will generate 3 time
     * series points (from "2020-12-27T01:00:00Z" to "2020-12-27T04:00:00Z"), for
     * which we will return their forecasted values.
     * Note: The horizon time is only used for forecasting not for anormaly
     * detection. To detect anomalies for multiple points of time,
     * simply send multiple queries with those as
     * [detectionTime][google.cloud.timeseriesinsights.v1.QueryDataSetRequest.detection_time].
     *
     * Generated from protobuf field <code>.google.protobuf.Duration horizon_duration = 13 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param \Google\Protobuf\Duration $var
     * @return $this
     */
    public function setHorizonDuration($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Duration::class);
        $this->horizon_duration = $var;

        return $this;
    }

}

