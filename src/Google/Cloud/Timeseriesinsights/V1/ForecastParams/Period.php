<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/timeseriesinsights/v1/timeseries_insights.proto

namespace Google\Cloud\Timeseriesinsights\V1\ForecastParams;

use UnexpectedValueException;

/**
 * A time period of a fixed interval.
 *
 * Protobuf type <code>google.cloud.timeseriesinsights.v1.ForecastParams.Period</code>
 */
class Period
{
    /**
     * Unknown or simply not given.
     *
     * Generated from protobuf enum <code>PERIOD_UNSPECIFIED = 0;</code>
     */
    const PERIOD_UNSPECIFIED = 0;
    /**
     * 1 hour
     *
     * Generated from protobuf enum <code>HOURLY = 5;</code>
     */
    const HOURLY = 5;
    /**
     * 24 hours
     *
     * Generated from protobuf enum <code>DAILY = 1;</code>
     */
    const DAILY = 1;
    /**
     * 7 days
     *
     * Generated from protobuf enum <code>WEEKLY = 2;</code>
     */
    const WEEKLY = 2;
    /**
     * 30 days
     *
     * Generated from protobuf enum <code>MONTHLY = 3;</code>
     */
    const MONTHLY = 3;
    /**
     * 365 days
     *
     * Generated from protobuf enum <code>YEARLY = 4;</code>
     */
    const YEARLY = 4;

    private static $valueToName = [
        self::PERIOD_UNSPECIFIED => 'PERIOD_UNSPECIFIED',
        self::HOURLY => 'HOURLY',
        self::DAILY => 'DAILY',
        self::WEEKLY => 'WEEKLY',
        self::MONTHLY => 'MONTHLY',
        self::YEARLY => 'YEARLY',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Period::class, \Google\Cloud\Timeseriesinsights\V1\ForecastParams_Period::class);

